Code Review Writeup - Rolling Module

Team: Discord Dragons
    Members: Dana, Kevin, Max, Swamik
    Project: 4B: Code Review Report  
    Primary Author: Max
    Slip Days: 0

28 November 2020
13:00 PST

Reviewers: Dana, Kevin, Swamik

The component being reviewed during this session was the rolling module code,
which includes code for testing and functionality for the rolling portion. 
This supports dice rolling, item tracking, macro storage, and item usage within
player games. Testing is black box with the exception of macro handling, which
requires insight into how the items are being stored to test correct functionality.

Implementation Code:
- Clash between names of functions in interface and rolling module
    - Avoid user confusion on front end
    - Issues: roll(), rollAdv(), addMacro(), delMacro(), callMacro()
    - Potential fixes: replace 'from rolling import *' with 'import rolling'
                       Rename methods for easier integration

- rollAdv() and multiRoll() both return strings, need int returns for initiative table
    - return a list with [string return, raw result]
    - leave parsing for interface

- rollAdv() looks for True or False, we are actually passing in strings
    - instead look for 'True' 'False' strings.

- Do we need to always give a fudge param?
    - No

- Interface expects die, q, mod, roll for manualRoll params
    - Easy change, will do.

- No function to display all macros
    - May be helpful for players returning to game after a long break

- Is it ok to nest function calls?
    - Yes

- What happens when delMacro or callMacro are used when there is no file?

- When is the file created?

- Can we use a helper function for parsing the file? (Repeated code in del and call)

Testing Code:
- Test callMacro_with_item can we just roll a 1d1+1 so output is guaranteed?
    - Better approach for sure

- Test roll_param_error2 uses 0 to check, should also check -1
    - Easy


Decisions:
- Interface will call rolling methods with independent arguments
- Basic user roll with no params should always call multiRoll with no params
- !join result parsing will be done by interface
- For now, calls to rolling module with be with rolling.*() (subject to change)
- RollAdv() will be passed string representation of boolean values, not actual bools