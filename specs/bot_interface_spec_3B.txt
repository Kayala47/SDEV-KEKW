
Team: Discord Dragons
    Members: Dana, Kevin, Max, Swamik
    Project: 3B: Specifications 
    Primary Author: Swamik
    Slip Days: 0

This specification is for the module that we as a team decided to call the "Discord API Module."

The purpose of this module is to handel the user inputs and to act as the user interface. As such, the purpose of 
most of the functions in this module will be getting the user input ready for calls to other modules, and how to 
handel invalid inputs. The functions described are public methods and the only way for users to interact with out bot. 

Note: All of the functions below listen to user input using discord's built in methods. The primary listening mechanism 
will be the bot.on('message', ...). What this built in function does is listen to all of the messages written by all 
of the users in the text chanel. Then if the message starts with the chosen prefix, it will know that it is a command. Then 
depending on what the command is it will do a different functon. 

Basic code structure: 
bot.on('message', funciton (user, userID, channelID, message, evt) {

    if (message.substring(0,1) == 'PREFIX'){
        argument = message.substring(1).split (' ') // spliting the message by a space 
        cmd = args [0]

        // Now we have the cmd so we will have different functions depending on the cmd  

    }
})
// Now we describe the functions avalable for the users to call 

Function help: 
inputs: none 
output: message to text chanel 
logic:  if cmd == help prefexed by their chosed prefix (ex: !help): 
            return a message to the text chanel with basic information about how to use the bot funcitons 
error handeling: 
comments: complexity is low as we are returning the message 

Function setprefix: 
inputs: [new prefix]
possible values for [new prefix]: {!, $, -, ?, /}
output: none 
logic: if cmd == setprefix:
            if setprefix is followed by a space and a symbol that exsits in a predefined dictionary 
                change the var labeled prefix to that new symbol       
error handeling: if the user enters a symbol that is not part of the predefined list, do not change the 
                 prefix and return a message to the chanel with the list of possible symbols that they can 
                 change the prefix to 
Comments: We want the users to be able to change the prefix, but only to a predefined list. This is so that they 
          cannot change the prefix to something like 'a' which would make the program confused. 


Function roll: 
inputs: [number of dice]d[sides of dice] + [modifier]
output: imbedded message on the discord chanel 
logic: if cmd == roll: 
            split the string followed by roll by '+' so we should split the modefier from the dice roll 
            then split the first part ([number of dice]d[sides of dice]) by 'd'  // at this point the initial command is split into 3 ints 
            if modifier AND num dice AND sides of dice are ints:
                return the result from the call the roll function from the roll module with the three inputs as an imbedded message
error handeling: if the users do not enter the dice rolls in the correct format, we are not going to return anything. The function will simply 
                 not pass the if statements and thus will do nothing. 
comments: We chose to not return anything as typos are common and we do not want users to get the same message everytime a user makes a typo while 
          rolling. Rolling is the function that will be used the most. If users do have problems with it, they can always use the help function. 

Function froll: 
inputs: [number of dice]d[sides of dice] + [modifier] [predetermined dice result]
output: imbedded message on the discord chanel 
logic: if cmd == froll: 
        split the string followed by roll by '+' so we should split the modefier and predetermined dice result from the dice roll 
        then split the first part ([number of dice]d[sides of dice]) by 'd'  
        then split the second part ([modifier] [predetermined dice result]) by ' ' // at this point we should have 4 ints 
        return the result from the call the froll function in the roll module with the three inputs as an imbedded message
error handeling: if the users do not enter the dice rolls in the correct format, we are not going to return anything. The function will simply 
                 not pass the if statements and thus will do nothing. 
comments: We chose to not return anything as typos are common. We want this functionaly to be less known. If a user inputs a froll, 
          and the program returns nothing, we are hoping the other users will think that it was just a typo and probably not think much of it. 

Fucntion mroll: 
inputs: [physical dice results] // the dice rolls seperated by commas 
output: imbedded message on discord text chanel 
logic: if cmd == mroll: 
        split the string followed by the mroll command by ',' to get the ints for the rolls // should have ints now 
        return the result from the call the mroll function in the roll module with the three inputs as an imbedded message
error handeling: if the users do not enter the dice rolls in the correct format, we are not going to return anything. The function will simply 
                 not pass the if statements and thus will do nothing. 
comments: We chose to not return anything as typos are common and we do not want users to get the same message everytime a user makes a typo while 
          rolling. Rolling is the function that will be used the most. If users do have problems with it, they can always use the help function. 

Function init_joinR: 
inputs: [name] [initiative modifier]
output: none 
logic: if cmd == init_joinR: 
            split the input string by ' ' // we get the name plus modifier 
            call the reqular roll function from the roll module (just rolling a 20 side dice) with the modifier 
            call the inititve tracker function with the input of the user's name and the dice roll result 
error handeling: If the users do use the init_joinR, this is done only once per person per session so if the users do 
                 have an error in their inputs, we will return an imbedded message with instructions on how to use it. 
comments: We do want to return a message here as we do not expect users to use init_joinR frequently so sending a message 
          with instructions is reasonable. 

// manuel roll for initive tracking 
Function init_joinM: 
inputs: [name] [initiative roll]
output: none 
logic: if cmd == init_joinR: 
            split the input string by ' ' // we get the name plus the roll  
            call the inititve tracker function with the input of the user's name and the dice roll result 
error handeling: If the users do use the init_joinM, this is done only once per person per session so if the users do 
                 have an error in their inputs, we will return an imbedded message with instructions on how to use it. 
comments: We do want to return a message here as we do not expect users to use init_joinR frequently so sending a message 
          with instructions is reasonable. 

Function init begin: 
inputs: none 
outputs: imbedded message on discord text chanel
logic: if cmd == init begin: 
           return the result from a call to the init begin function from the initive module as imbedded message 
        // we might also have a emoji reaction functinality: Users can give emoji reactions to the message returned by the bot and do an action
        message.awaitReact("EMOJI"): 
            call the logic for each specific emoji case from the inititve tracker module 
error handeling: if the user writes "init" followed by a command not in the system, return a list of commands that they 
                 can do using init. 
comments: If the user reacts with an emoji we do not have a functionaly for, the program will do nothing. Only certain 
          emojis will cause an action to occur. 

Function init end: 
inputs: none 
outputs: none 
logic: if cmd == init end: 
           call the init end function from the initive module 
error handeling: if the user writes "init" followed by a command not in the system, return a list of commands that they 
                 can do using init
comments: 

Function search: 
inputs: [spell/background/feat/class/race/monster/item] [keyword]
output: imbedded message on discord text chanel 
logic: if cmd == search: 
            split the input by ' ' to get the key words and what they are searching 
            return the call to the seach function from the call module as imbedded message 
error handeling: if the users do not enter the input in the correct format, return a small message on how to use the 
                 search function. 
comments: This function just returns what we get from the search API so if nothing is found, it will mostlikely just return a 
          empty message. If that is the case, we can put a check for that and return a message saying "nothing found". That logic 
          will be handled in the search module not here 

