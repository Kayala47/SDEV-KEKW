Testing Plan - Initiative Tracker Module

Team: Discord Dragons
    Members: Dana, Kevin, Max, Swamik
    Project: 3C - Testing Plan
    Primary Author: Dana Teves
    Slip Days: 5

SPECIFICATIONS TO COVER:
- able to add a character to the initiative order (database)
- able to begin combat, which returns the lists (usernames, names, inits)
- able to end combat, which clears the database
- able to retrieve the details of next player in initiative order (retrieved from database)
- able to retrieve the details of previous player in initiative order (retrieved from database)
- able to increment and decrement round based on number of times "next" is called
- format will be acceptable for the bot
(integration testing - will not be done here)


BLACK BOX TEST CASES

Testing: join(username, name, init)
    Testing Case 1: Assert that the user is added to the database by checking that,
                    after retrieving data from the database, the usernames, names,
                    and inits lists have increased in length.
    Justification: Ensures that when users wish to add their character to the initiative
                   order, it reflects correctly in the database and in the initiative
                   order object stored by the bot interface.
    Special Set-Up: Assuming that the database is set-up correctly, we need to create a
                    list of usernames, names, and inits to use as inputs.
    Generation: When join(username, name, init) is called.
    Correctness: We are expecting that the length of each of these lists will increase by
                 one each time a new character joins the initiative order.
    Clean-Up: Remove object pointer, and set usernames, names, and inits lengths to 0.

----------------------------------------------------------------------------------------

    Testing Case 2: Assert that the username, name, and init of the character being added
                    to the initiative order match when retrieved from the lists.
    Justification: Ensures that the usernames, names, and inits are all linked properly
                   across lists, and will show up correctly when displayed for the user.
    Special Set-Up: N/A
    Generation: When join(username, name, init) is called.
    Correctness: We are expecting that when join(u,n,i) is called, (u,n,i) will have the
                 same index in each of their respective lists in the initiative order
                 object. When we retrieve them, they will be the correct (u,n,i)
                 combination that we started with.
    Clean-Up: Clear lists, remove object pointer, set usernames, names, and inits lengths
              to 0.

----------------------------------------------------------------------------------------

    Testing Case 3: Assert that init is an integer.
    Justification: Ensures that database can be properly sorted.
    Special Set-Up: N/A
    Generation: When join(username, name, init) is called.
    Correctness: We are expecting that init is an integer. If not, we return an error
                 message.
    Clean-Up: N/A

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

Testing: begin()
    Testing Case 1: Assert that when the database is empty, an error message is returned.
    Justification: A user shouldn't be able to begin combat if there are no characters
                   currently engaged in combat. If the database is empty, this means that
                   there are no active characters in combat.
    Special Set-Up: Assuming the database is set-up correctly, we need to ensure it starts
                    this test empty.
    Generation: When begin() is called before users call join(username, name, init)
                through the bot interface via "!join name init".
    Correctness: An error message is expected to be returned.
    Clean-Up: N/A

----------------------------------------------------------------------------------------

    Testing Case 2: Assert that the full list of characters engaged in combat is returned
                    when begin() is called.
    Justification: Ensures that data is being correctly retrieved from the database, so
                   that the initiative tracker is complete.
    Special Set-Up: Assuming the database is set-up correctly, we need a list of
                    usernames, names, and inits to input into the database. (Either
                    using !join or manually inputing them into the database.)
    Generation: When begin() is called through the bot interface via "!begin".
    Correctness: We are expecting that all the character in the list used for set-up are
                 returned.
    Clean-Up: Clear database.

----------------------------------------------------------------------------------------

    Testing Case 3: Assert that the characters are in the correct sorted order when they
                    are retrieved from the database.
    Justification: Ensures that data is being correctly retrieved or stored in the
                   database, so that the initiative tracker is complete.
    Special Set-Up: Assuming the database is set-up correctly, we need a list of
                    usernames, names, and inits to input into the database. (Either
                    using !join or manually inputing them into the database.)
    Generation: When begin() is called through the bot interface via "!begin".
    Correctness: We are expecting that the characters in the list used for set-up are
                 returned from highest to lowest int.
    Clean-Up: Clear database.

----------------------------------------------------------------------------------------

    Testing Case 4: Assert that the database has at least two characters.
    Justification: Ensures that combat isn't begun without any active combatants.
    Special Set-Up: Add only one entry into the database, then add two and more.
    Generation: When begin() is called before join(username, name, init).
    Correctness: We are expecting that if the database has less than two characters, an
                 error message is returned. Otherwise, begin() as normal by returning
                 list of retrieved characters from database.
    Clean-Up: Clear database.

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

Testing: end()
    Testing Case 1: Assert that the database is cleared when end() is called.
    Justification: Ensures that database is clear for the next session of combat, to clear
                   the board for new characters with new initiatives.
    Special Set-Up: The database needs to be filled with data.
    Generation: At the end of combat, when a user wants to end the combat session.
    Correctness: We are expecting that the database is clear of data.
    Clean-Up: N/A

----------------------------------------------------------------------------------------

    Testing Case 2: Assert that the database has data in it before attempting to clear it.
    Justification: It doesn't make sense for combat to end before it has begun.
    Special Set-Up: Try end() before adding data, then try after adding data.
    Generation: When end() is called before join(username, name, init) and begin().
    Correctness: We are expecting that if there is no data in the database when end() is
                 called, it will return an error message. Otherwise, it will clear the
                 database.
    Clean-Up: N/A

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

WHITE BOX TEST CASES

Testing: next()
    Testing Case 1: Assert that currentPlayer is increased by 1 if index isn't database
                    length - 1.
    Justification: The index should increment when someone finishes their turn in combat.
    Special Set-Up: The database should have at least two characters.
    Generation: When a player finishes their turn and clicks the "next" emoji reaction
                on the bot interface.
    Correctness: We are expecting that when the currentPlayer, or index, is anywhere
                 before the last person in initiative order, or database length - 1, the
                 currentPlayer is increased by 1.
    Clean-Up: end()

----------------------------------------------------------------------------------------

    Testing Case 2: Assert that currentPlayer is reset to 0 if index is database length
                    - 1 when next() is called.
    Justification: The index should loop around to the top of the initiative order once
                   the last person in the list takes their turn.
    Special Set-Up: The database should have at least two characters.
    Generation: When a player finishes their turn and clicks the "next" emoji reaction
                at the end of a round.
    Correctness: We are expecting that when currentPlayer is at database length - 1, it
                 gets reset to 0.
    Clean-Up: end()

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

Testing: prev()
    Testing Case 1: Assert that currentPlayer is decreased by 1 if index isn't 0.
    Justification: The index should decrement when someone retracts or revisits their
                   turn in combat.
    Special Set-Up: The database should have at least two characters.
    Generation: When a player finished their turn and clicks the "previous" emoji reaction
                on the bot interface.
    Correctness: We are expecting that when the currentPlayer, or index, is anywhere
                 after the first person in initiative order, or 0, the currentPlayer is
                 decreased by 1.
    Clean-Up: end()

----------------------------------------------------------------------------------------

    Testing Case 2: Assert that currentPlayer is reset to data length - 1 if index is
                    0 when prev() is called.
    Justification: The index should loop back to the bottom of initiative order if they
                   rewind the combat order.
    Special Set-Up: The database should have at least two characters.
    Generation: When a player revisits their turn and clicks the "previous" emoji reaction
                on the bot interface when they are at the top of initiative order.
    Correctness: We are expecting that when currentPlayer is at 0, it gets reset to
                 database length - 1.
    Clean-Up: end()

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

Testing: inc_round() via next()
    Testing Case 1: Assert that the round has been incremented by 1.
    Justification: Ensures that round is updated correctly when next() is called.
    Special Set-Up: next() working correctly; the database needs to be filled with at
                    least two characters, and next() needs to be looped until the current
                    player is back to index 0.
    Generation: When all players have taken their turn.
    Correctness: We are expecting that when all characters have been prompted and have
                 completed their turns, the round will increase by 1.
    Clean-Up: end()

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

Testing: dec_round() via prev()
    Testing Case 1: Assert that the round has been decremented by 1.
    Justification: Ensures that round is updated correctly when prev() is called.
    Special Set-Up: prev() working correctly; the database needs to be filled with at
                    least two characters, and prev() needs to be looped until the current
                    player is back to index database length - 1.
    Generation: When a turn needs to be revisited, for example if a user clicked next on
                accident.
    Correctness: We are expecting that if the current index is 0 and prev() is called, the
                 round will decrease by 1.
    Clean-Up: end()
    
